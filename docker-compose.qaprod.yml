# docker-compose.qaprod.yml
services:
  # ====== DB QA ======
  db-qa:
    image: mysql:5.7
    container_name: tp2_db_qa
    environment:
      MYSQL_ROOT_PASSWORD: ladrillo753
      MYSQL_DATABASE: pbbv
    ports:
      - "3307:3306"                       # DB QA expuesta en 3307
    volumes:
      - mysqldata-qa:/var/lib/mysql       # datos persistentes de QA
      - ./db/init:/docker-entrypoint-initdb.d:ro  # scripts de init compartidos
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -pladrillo753 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    networks: [qaprod-net]

  # ====== DB PROD ======
  db-prod:
    image: mysql:5.7
    container_name: tp2_db_prod
    environment:
      MYSQL_ROOT_PASSWORD: ladrillo753
      MYSQL_DATABASE: pbbv
    ports:
      - "3308:3306"                       # DB PROD expuesta en 3308
    volumes:
      - mysqldata-prod:/var/lib/mysql     # datos persistentes de PROD
      - ./db/init:/docker-entrypoint-initdb.d:ro  # mismos scripts => esquema idéntico
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -pladrillo753 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    networks: [qaprod-net]

  # ====== BACKEND QA ======
  backend-qa:
    image: baujuncos/tp2-backend:v1.0     # misma imagen que PROD (requisito)
    build: ./backend
    container_name: tp2_backend_qa
    depends_on:
      db-qa:
        condition: service_healthy
    environment:
      # conexión por nombre de servicio en la red (no localhost)
      DB_HOST: db-qa
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: ladrillo753
      DB_NAME: pbbv

      # DSN/Connection string (útil si la app la usa directamente, ej. GORM/Golang)
      # Ejemplo GORM MySQL: user:pass@tcp(host:port)/db?parseTime=true&loc=Local
      DB_DSN: "root:ladrillo753@tcp(db-qa:3306)/pbbv?parseTime=true&loc=Local"

      # distinción de entorno y logging
      APP_ENV: QA
      LOG_LEVEL: debug
    ports:
      - "8081:8080"                          # API QA en http://localhost:8081
    networks: [qaprod-net]

  # ====== BACKEND PROD ======
  backend-prod:
    image: baujuncos/tp2-backend:v1.0     # MISMA imagen que QA
    build: ./backend
    container_name: tp2_backend_prod
    depends_on:
      db-prod:
        condition: service_healthy
    environment:
      DB_HOST: db-prod
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: ladrillo753
      DB_NAME: pbbv
      DB_DSN: "root:ladrillo753@tcp(db-prod:3306)/pbbv?parseTime=true&loc=Local"
      APP_ENV: PROD
      LOG_LEVEL: info                      # PROD más silencioso
    ports:
      - "8080:8080"                        # API PROD en http://localhost:8082
    networks: [qaprod-net]

  # FRONTEND apuntando a QA
  frontend:
     image: baujuncos/tp2-frontend:v1.0
     container_name: tp2_frontend
     depends_on: [backend-qa]
     ports:
       - "80:80"
     networks: [qaprod-net]

volumes:
  mysqldata-qa:
  mysqldata-prod:

networks:
  qaprod-net: {}
